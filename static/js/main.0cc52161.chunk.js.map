{"version":3,"sources":["components/BasicForm.js","App.js","index.js"],"names":["BasicForm","props","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","firstNameDirty","setFirstNameDirty","lastNameDirty","setLastNameDirty","emailDirty","setEmailDirty","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","isFormValid","setIsFormValid","useEffect","className","htmlFor","onChange","e","target","value","test","String","toLowerCase","firstNameHandler","onBlur","id","firstNameBlurHandler","type","style","color","lastNameHandler","lastNameBlurHandler","emailHandler","EmailBlurHandler","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"0LAuHeA,EApHG,SAACC,GAEjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAA0CR,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAoCV,oBAAS,GAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAA4CZ,mBAAS,yHAArD,mBAAOa,EAAP,KAAuBC,EAAvB,KACA,EAA0Cd,mBAAS,wHAAnD,mBAAOe,EAAP,KAAsBC,EAAtB,KACA,EAAoChB,mBAAS,qHAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KACA,EAAsClB,oBAAS,GAA/C,mBAAOmB,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WAEND,IADEP,GAAkBE,GAAiBE,MAKtC,CAACJ,EAAgBE,EAAeE,IAuEnC,OACE,iCACE,sBAAKK,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,wBACA,uBAAOC,SAAU,SAAAC,GAAC,OA1ED,SAACA,GACxBvB,EAAauB,EAAEC,OAAOC,OACR,0CACHC,KAAKC,OAAOJ,EAAEC,OAAOC,OAAOG,eAMrChB,EAAkB,KALlBA,EAAkB,+FACdW,EAAEC,OAAOC,OACXb,EAAkB,iIAoEMiB,CAAiBN,IAAIE,MAAO1B,EAAW+B,OAAQ,SAAAP,GAAC,OAlCjD,SAACA,GAErB,SADCA,EAAEC,OAAOO,IAEbzB,GAAkB,GA+B0D0B,CAAqBT,IAAIU,KAAK,OAAOF,GAAG,SAChH1B,GAAkBM,GAAmB,mBAAGuB,MAAO,CAAEC,MAAO,OAAnB,SAA6BxB,OAEtE,sBAAKS,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,uBACA,uBAAOC,SAAU,SAAAC,GAAC,OAlEF,SAACA,GACvBrB,EAAYqB,EAAEC,OAAOC,OACC,0CACHC,KAAKC,OAAOJ,EAAEC,OAAOC,OAAOG,eAM7Cd,EAAiB,KALjBA,EAAiB,uHACbS,EAAEC,OAAOC,OACXX,EAAiB,yJA4DOsB,CAAgBb,IAAIE,MAAOxB,EAAU6B,OAAQ,SAAAP,GAAC,OA9BhD,SAACA,GAEpB,SADCA,EAAEC,OAAOO,IAEbvB,GAAiB,GA2ByD6B,CAAoBd,IAAIU,KAAK,OAAOF,GAAG,SAC7GxB,GAAiBM,GAAkB,mBAAGqB,MAAO,CAAEC,MAAO,OAAnB,SAA6BtB,UAGtE,sBAAKO,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,4BACA,uBAAOC,SAAU,SAAAC,GAAC,OA3DH,SAACA,GACpBnB,EAASmB,EAAEC,OAAOC,OACC,0EACHC,KAAKC,OAAOJ,EAAEC,OAAOC,OAAOG,eAM1CZ,EAAc,KALdA,EAAc,2GACVO,EAAEC,OAAOC,OACXT,EAAc,oHAqDQsB,CAAaf,IAAIE,MAAOtB,EAAO2B,OAAQ,SAAAP,GAAC,OA3B3C,SAACA,GAEjB,SADCA,EAAEC,OAAOO,IAEbrB,GAAc,GAwBoD6B,CAAiBhB,IAAIU,KAAK,OAAOF,GAAG,SACpGtB,GAAcM,GAAe,mBAAGmB,MAAO,CAAEC,MAAO,OAAnB,SAA6BpB,OAE9D,qBAAKK,UAAU,eAAf,SACE,wBAAQoB,UAAWvB,EAAnB,0BCvGOwB,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCANsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.0cc52161.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst BasicForm = (props) => {\n\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [firstNameDirty, setFirstNameDirty] = useState(false)\n  const [lastNameDirty, setLastNameDirty] = useState(false)\n  const [emailDirty, setEmailDirty] = useState(false)\n  const [firstNameError, setFirstNameError] = useState('First-Name не может быть пустым ')\n  const [lastNameError, setLastNameError] = useState('Last-Name не может быть пустым ')\n  const [emailError, setEmailError] = useState('E-Mail не может быть пустым ')\n  const [isFormValid, setIsFormValid] = useState(false)\n\n  useEffect(() => {\n    if (firstNameError || lastNameError || emailError) {\n      setIsFormValid(false)\n    } else {\n      setIsFormValid(true)\n    }\n  }, [firstNameError, lastNameError, emailError])\n\n  const firstNameHandler = (e) => {\n    setFirstName(e.target.value)\n    const regex = /^(?=.{1,50}$)[a-z]+(?:['_.\\s][a-z]+)*$/i\n    if (!regex.test(String(e.target.value).toLowerCase())) {\n      setFirstNameError('Некорректный имя')\n      if(!e.target.value){\n        setFirstNameError('Имя не может быть пустым')\n      }\n    } else {\n      setFirstNameError(\"\")\n    }\n  }\n\n  const lastNameHandler = (e) => {\n    setLastName(e.target.value)\n    const regexLastName = /^(?=.{1,50}$)[a-z]+(?:['_.\\s][a-z]+)*$/i\n    if (!regexLastName.test(String(e.target.value).toLowerCase())) {\n      setLastNameError('Некорректный фамилия')\n      if(!e.target.value){\n        setLastNameError('Фамилия не может быть пустым')\n      }\n    } else {\n      setLastNameError(\"\")\n    }\n  }\n\n  const emailHandler = (e) => {\n    setEmail(e.target.value)\n    const regexEmail = /^[a-zA-Z0-9.! #$%&'*+/=? ^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\. [a-zA-Z0-9-]+)*$/;\n    if (!regexEmail.test(String(e.target.value).toLowerCase())) {\n      setEmailError('Некорректный Емаил')\n      if(!e.target.value){\n        setEmailError('Email не может быть пустым')\n      }\n    } else {\n      setEmailError(\"\")\n    }\n  }\n\n\n  const firstNameBlurHandler = (e) => {\n    switch (e.target.id) {\n      case 'name':\n        setFirstNameDirty(true)\n        break\n      default:\n    }\n  }\n\n  const lastNameBlurHandler = (e) => {\n    switch (e.target.id) {\n      case 'name':\n        setLastNameDirty(true)\n        break\n      default:\n    }\n  }\n\n  const EmailBlurHandler = (e) => {\n    switch (e.target.id) {\n      case 'name':\n        setEmailDirty(true)\n        break\n      default:\n    }\n  }\n\n\n\n  return (\n    <form>\n      <div className='control-group'>\n        <div className='form-control'>\n          <label htmlFor='name'>First Name</label>\n          <input onChange={e => firstNameHandler(e)} value={firstName} onBlur={e => firstNameBlurHandler(e)} type='text' id='name' />\n          {(firstNameDirty && firstNameError) && <p style={{ color: 'red' }}>{firstNameError}</p>}\n        </div>\n        <div className='form-control'>\n          <label htmlFor='name'>Last Name</label>\n          <input onChange={e => lastNameHandler(e)} value={lastName} onBlur={e => lastNameBlurHandler(e)} type='text' id='name' />\n          {(lastNameDirty && lastNameError) && <p style={{ color: 'red' }}>{lastNameError}</p>}\n        </div>\n      </div>\n      <div className='form-control'>\n        <label htmlFor='name'>E-Mail Address</label>\n        <input onChange={e => emailHandler(e)} value={email} onBlur={e => EmailBlurHandler(e)} type='text' id='name' />\n        {(emailDirty && emailError) && <p style={{ color: 'red' }}>{emailError}</p>}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!isFormValid} >Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}